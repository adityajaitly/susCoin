<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <meta name="description" content="Connect your Mastercard to susCoin for seamless carbon credit earning">
    
    <!-- Tailwind CSS -->
    <link href="/styles/output.css" rel="stylesheet">
    
    <!-- Socket.IO -->
    <script src="/socket.io/socket.io.js"></script>
    
    <!-- Confetti library -->
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
</head>
<body class="bg-sus-bg text-sus-text font-sans antialiased">
    <!-- Theme Toggle -->
    <button id="themeToggle" class="fixed top-4 right-4 z-50 p-3 bg-sus-card border border-sus-line rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 text-2xl hover:scale-110 cursor-pointer" title="Toggle dark mode">
        🌙
    </button>

    <!-- Navigation -->
    <nav class="fixed top-0 left-0 right-0 z-40 bg-sus-card/80 backdrop-blur-md border-b border-sus-line">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <div class="flex items-center">
                    <a href="/" class="flex items-center">
                        <img src="/images/logo.png" alt="susCoin Logo" class="h-10 w-auto mr-2 logo">
                        <span class="text-2xl font-bold text-sus-primary">susCoin</span>
                    </a>
                </div>
                <div class="hidden md:flex items-center space-x-8">
                    <a href="/dashboard" class="text-sus-muted hover:text-sus-text transition-colors">Dashboard</a>
                    <a href="/wallet" class="text-sus-muted hover:text-sus-text transition-colors">Wallet</a>
                    <a href="/calculator" class="text-sus-muted hover:text-sus-text transition-colors">Calculator</a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="pt-24 pb-16 px-4 sm:px-6 lg:px-8">
        <div class="max-w-2xl mx-auto">
            <!-- Header -->
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-sus-text mb-4">Connect Your Mastercard</h1>
                <p class="text-sus-muted">Link your Mastercard to automatically earn carbon credits on eligible purchases</p>
            </div>

            <!-- Card Form -->
            <div class="card">
                <form id="cardForm" class="space-y-6">
                    <!-- Card Number -->
                    <div>
                        <label for="cardNumber" class="block text-sm font-medium text-sus-text mb-2">
                            Card Number
                        </label>
                        <div class="relative">
                            <input 
                                type="text" 
                                id="cardNumber" 
                                name="cardNumber" 
                                class="w-full p-3 border border-sus-line rounded-lg bg-sus-card text-sus-text placeholder-sus-muted focus:outline-none focus:ring-2 focus:ring-sus-primary focus:border-transparent"
                                placeholder="1234 5678 9012 3456"
                                maxlength="19"
                                required
                            >
                            <div class="absolute right-3 top-3">
                                <svg class="w-8 h-8 text-sus-muted" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                </svg>
                            </div>
                        </div>
                        <div id="cardNumberError" class="text-sus-error text-sm mt-1 hidden"></div>
                    </div>

                    <!-- Card Details Row -->
                    <div class="grid grid-cols-2 gap-4">
                        <!-- Expiry Date -->
                        <div>
                            <label for="expiryDate" class="block text-sm font-medium text-sus-text mb-2">
                                Expiry Date
                            </label>
                            <input 
                                type="text" 
                                id="expiryDate" 
                                name="expiryDate" 
                                class="w-full p-3 border border-sus-line rounded-lg bg-sus-card text-sus-text placeholder-sus-muted focus:outline-none focus:ring-2 focus:ring-sus-primary focus:border-transparent"
                                placeholder="MM/YY"
                                maxlength="5"
                                required
                            >
                            <div id="expiryDateError" class="text-sus-error text-sm mt-1 hidden"></div>
                        </div>

                        <!-- CVV -->
                        <div>
                            <label for="cvv" class="block text-sm font-medium text-sus-text mb-2">
                                CVV
                            </label>
                            <input 
                                type="text" 
                                id="cvv" 
                                name="cvv" 
                                class="w-full p-3 border border-sus-line rounded-lg bg-sus-card text-sus-text placeholder-sus-muted focus:outline-none focus:ring-2 focus:ring-sus-primary focus:border-transparent"
                                placeholder="123"
                                maxlength="4"
                                required
                            >
                            <div id="cvvError" class="text-sus-error text-sm mt-1 hidden"></div>
                        </div>
                    </div>

                    <!-- Cardholder Name -->
                    <div>
                        <label for="cardholderName" class="block text-sm font-medium text-sus-text mb-2">
                            Cardholder Name
                        </label>
                        <input 
                            type="text" 
                            id="cardholderName" 
                            name="cardholderName" 
                            class="w-full p-3 border border-sus-line rounded-lg bg-sus-card text-sus-text placeholder-sus-muted focus:outline-none focus:ring-2 focus:ring-sus-primary focus:border-transparent"
                            placeholder="John Doe"
                            required
                        >
                        <div id="cardholderNameError" class="text-sus-error text-sm mt-1 hidden"></div>
                    </div>

                    <!-- Billing Address -->
                    <div>
                        <label for="billingAddress" class="block text-sm font-medium text-sus-text mb-2">
                            Billing Address
                        </label>
                        <textarea 
                            id="billingAddress" 
                            name="billingAddress" 
                            rows="3"
                            class="w-full p-3 border border-sus-line rounded-lg bg-sus-card text-sus-text placeholder-sus-muted focus:outline-none focus:ring-2 focus:ring-sus-primary focus:border-transparent"
                            placeholder="123 Main St, City, State, ZIP"
                            required
                        ></textarea>
                        <div id="billingAddressError" class="text-sus-error text-sm mt-1 hidden"></div>
                    </div>

                    <!-- Terms and Conditions -->
                    <div class="flex items-start space-x-3">
                        <input 
                            type="checkbox" 
                            id="terms" 
                            name="terms" 
                            class="mt-1 h-4 w-4 text-sus-primary focus:ring-sus-primary border-sus-line rounded"
                            required
                        >
                        <label for="terms" class="text-sm text-sus-muted">
                            I agree to the <a href="#" class="text-sus-primary hover:underline">Terms of Service</a> and 
                            <a href="#" class="text-sus-primary hover:underline">Privacy Policy</a>
                        </label>
                    </div>
                    <div id="termsError" class="text-sus-error text-sm mt-1 hidden">You must accept the terms and conditions to continue</div>

                    <!-- Submit Button -->
                    <button 
                        type="submit" 
                        id="submitBtn"
                        class="w-full btn-primary text-lg py-4 disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled
                    >
                        <span id="submitText">Connect Mastercard</span>
                        <span id="submitLoading" class="hidden">
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Connecting...
                        </span>
                    </button>
                </form>
            </div>

            <!-- Benefits Section -->
            <div class="mt-8 card">
                <h3 class="text-lg font-semibold text-sus-text mb-4">Benefits of Connecting Your Mastercard</h3>
                <div class="space-y-3">
                    <div class="flex items-start space-x-3">
                        <div class="text-sus-primary text-lg">🌱</div>
                        <div>
                            <div class="font-medium text-sus-text">Automatic Credit Earning</div>
                            <div class="text-sm text-sus-muted">Earn carbon credits on every eligible purchase automatically</div>
                        </div>
                    </div>
                    <div class="flex items-start space-x-3">
                        <div class="text-sus-primary text-lg">📊</div>
                        <div>
                            <div class="font-medium text-sus-text">Real-time Tracking</div>
                            <div class="text-sm text-sus-muted">See your carbon impact in real-time on your dashboard</div>
                        </div>
                    </div>
                    <div class="flex items-start space-x-3">
                        <div class="text-sus-primary text-lg">🎁</div>
                        <div>
                            <div class="font-medium text-sus-text">Exclusive Rewards</div>
                            <div class="text-sm text-sus-muted">Access to exclusive rewards and partner offers</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Modal -->
    <div id="successModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-sus-card rounded-lg p-8 max-w-md mx-4 text-center">
            <div class="text-6xl mb-4">🎉</div>
            <h3 class="text-2xl font-bold text-sus-text mb-4">Card Successfully Added!</h3>
            <p class="text-sus-muted mb-6">Your Mastercard has been connected successfully. You can now view your connected cards in settings.</p>
            <div class="flex space-x-4">
                <button onclick="closeSuccessModal()" class="btn-secondary flex-1">Continue</button>
                <a href="/wallet" class="btn-primary flex-1">View Wallet</a>
            </div>
        </div>
    </div>

    <!-- Notification Toast -->
    <div id="toast" class="fixed top-20 right-4 z-50 hidden">
        <div class="bg-sus-success text-white px-6 py-4 rounded-lg shadow-lg">
            <div id="toastMessage"></div>
        </div>
    </div>

    <script>
        // Initialize Socket.IO
        const socket = io();
        
        // Theme toggle
        const themeToggle = document.getElementById('themeToggle');
        const html = document.documentElement;
        
        // Check for saved theme preference or default to light
        const savedTheme = localStorage.getItem('theme') || 'light';
        
        // Apply theme immediately to prevent flash
        if (savedTheme === 'dark') {
            html.classList.add('dark');
        } else {
            html.classList.remove('dark');
        }
        
        themeToggle.textContent = savedTheme === 'dark' ? '☀️' : '🌙';
        
        themeToggle.addEventListener('click', () => {
            const isDark = html.classList.toggle('dark');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
            themeToggle.textContent = isDark ? '☀️' : '🌙';
            
            // Add visual feedback
            themeToggle.style.transform = 'scale(1.1)';
            setTimeout(() => {
                themeToggle.style.transform = 'scale(1)';
            }, 150);
        });

        // Form validation and submission
        const form = document.getElementById('cardForm');
        const submitBtn = document.getElementById('submitBtn');
        const submitText = document.getElementById('submitText');
        const submitLoading = document.getElementById('submitLoading');

        // Input elements
        const cardNumber = document.getElementById('cardNumber');
        const expiryDate = document.getElementById('expiryDate');
        const cvv = document.getElementById('cvv');
        const cardholderName = document.getElementById('cardholderName');
        const billingAddress = document.getElementById('billingAddress');
        const terms = document.getElementById('terms');

        // Error elements
        const cardNumberError = document.getElementById('cardNumberError');
        const expiryDateError = document.getElementById('expiryDateError');
        const cvvError = document.getElementById('cvvError');
        const cardholderNameError = document.getElementById('cardholderNameError');
        const billingAddressError = document.getElementById('billingAddressError');
        const termsError = document.getElementById('termsError');

        // Validation functions
        function validateCardNumber(value) {
            const cleaned = value.replace(/\s/g, '');
            if (cleaned.length < 13 || cleaned.length > 19) {
                return 'Card number must be between 13 and 19 digits';
            }
            if (!/^\d+$/.test(cleaned)) {
                return 'Card number must contain only digits';
            }
            return null;
        }

        function validateExpiryDate(value) {
            if (!/^\d{2}\/\d{2}$/.test(value)) {
                return 'Please use MM/YY format';
            }
            const [month, year] = value.split('/');
            const currentDate = new Date();
            const currentYear = currentDate.getFullYear() % 100;
            const currentMonth = currentDate.getMonth() + 1;
            
            if (parseInt(month) < 1 || parseInt(month) > 12) {
                return 'Invalid month';
            }
            if (parseInt(year) < currentYear || (parseInt(year) === currentYear && parseInt(month) < currentMonth)) {
                return 'Card has expired';
            }
            return null;
        }

        function validateCVV(value) {
            if (!/^\d{3,4}$/.test(value)) {
                return 'CVV must be 3 or 4 digits';
            }
            return null;
        }

        function validateCardholderName(value) {
            if (value.trim().length < 2) {
                return 'Name must be at least 2 characters';
            }
            if (!/^[a-zA-Z\s]+$/.test(value.trim())) {
                return 'Name can only contain letters and spaces';
            }
            return null;
        }

        function validateBillingAddress(value) {
            if (value.trim().length < 10) {
                return 'Address must be at least 10 characters';
            }
            return null;
        }

        function showError(element, message) {
            element.textContent = message;
            element.classList.remove('hidden');
            element.parentElement.querySelector('input, textarea').classList.add('border-sus-error');
        }

        function hideError(element) {
            element.classList.add('hidden');
            element.parentElement.querySelector('input, textarea').classList.remove('border-sus-error');
        }

        function updateSubmitButton() {
            const hasCardNumber = cardNumber.value && cardNumberError.classList.contains('hidden');
            const hasExpiryDate = expiryDate.value && expiryDateError.classList.contains('hidden');
            const hasCVV = cvv.value && cvvError.classList.contains('hidden');
            const hasCardholderName = cardholderName.value && cardholderNameError.classList.contains('hidden');
            const hasBillingAddress = billingAddress.value && billingAddressError.classList.contains('hidden');
            const hasAcceptedTerms = terms.checked && termsError.classList.contains('hidden');
            
            const isValid = hasCardNumber && hasExpiryDate && hasCVV && 
                           hasCardholderName && hasBillingAddress && hasAcceptedTerms;
            
            submitBtn.disabled = !isValid;
        }

        // Input formatting
        cardNumber.addEventListener('input', (e) => {
            let value = e.target.value.replace(/\s/g, '');
            value = value.replace(/(\d{4})/g, '$1 ').trim();
            e.target.value = value;
            
            // Only validate if user has entered something
            if (value.trim()) {
                const error = validateCardNumber(value);
                if (error) {
                    showError(cardNumberError, error);
                } else {
                    hideError(cardNumberError);
                }
            } else {
                hideError(cardNumberError);
            }
            updateSubmitButton();
        });

        expiryDate.addEventListener('input', (e) => {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length >= 2) {
                value = value.slice(0, 2) + '/' + value.slice(2, 4);
            }
            e.target.value = value;
            
            // Only validate if user has entered something
            if (value.trim()) {
                if (value.length === 5) {
                    const error = validateExpiryDate(value);
                    if (error) {
                        showError(expiryDateError, error);
                    } else {
                        hideError(expiryDateError);
                    }
                } else {
                    hideError(expiryDateError);
                }
            } else {
                hideError(expiryDateError);
            }
            updateSubmitButton();
        });

        cvv.addEventListener('input', (e) => {
            e.target.value = e.target.value.replace(/\D/g, '');
            
            // Only validate if user has entered something
            if (e.target.value.trim()) {
                if (e.target.value.length >= 3) {
                    const error = validateCVV(e.target.value);
                    if (error) {
                        showError(cvvError, error);
                    } else {
                        hideError(cvvError);
                    }
                } else {
                    hideError(cvvError);
                }
            } else {
                hideError(cvvError);
            }
            updateSubmitButton();
        });

        cardholderName.addEventListener('input', (e) => {
            // Only validate if user has entered something
            if (e.target.value.trim()) {
                const error = validateCardholderName(e.target.value);
                if (error) {
                    showError(cardholderNameError, error);
                } else {
                    hideError(cardholderNameError);
                }
            } else {
                hideError(cardholderNameError);
            }
            updateSubmitButton();
        });

        billingAddress.addEventListener('input', (e) => {
            // Only validate if user has entered something
            if (e.target.value.trim()) {
                const error = validateBillingAddress(e.target.value);
                if (error) {
                    showError(billingAddressError, error);
                } else {
                    hideError(billingAddressError);
                }
            } else {
                hideError(billingAddressError);
            }
            updateSubmitButton();
        });

        terms.addEventListener('change', (e) => {
            if (!e.target.checked) {
                showError(termsError, 'You must accept the terms and conditions to continue');
            } else {
                hideError(termsError);
            }
            updateSubmitButton();
        });

        // Form submission
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Show loading state
            submitBtn.disabled = true;
            submitText.classList.add('hidden');
            submitLoading.classList.remove('hidden');
            
            try {
                // Prepare form data
                const formData = {
                    cardNumber: cardNumber.value,
                    expiryDate: expiryDate.value,
                    cvv: cvv.value,
                    cardholderName: cardholderName.value,
                    billingAddress: billingAddress.value
                };
                
                console.log('Submitting form data:', formData);
                
                // Make API call
                const response = await fetch('/api/connect-mastercard', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });
                
                console.log('Response status:', response.status);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                console.log('API response:', result);
                
                if (result.success) {
                    // Show success modal
                    document.getElementById('successModal').classList.remove('hidden');
                    
                    // Show confetti
                    confetti({
                        particleCount: 100,
                        spread: 70,
                        origin: { y: 0.6 }
                    });
                    
                    // Store card info in localStorage for demo purposes
                    const connectedCards = JSON.parse(localStorage.getItem('connectedCards') || '[]');
                    connectedCards.push({
                        id: result.cardId,
                        type: 'Mastercard',
                        last4: result.last4,
                        cardholderName: cardholderName.value,
                        connectedAt: new Date().toISOString()
                    });
                    localStorage.setItem('connectedCards', JSON.stringify(connectedCards));
                    
                    // Reset form
                    form.reset();
                    
                } else {
                    showToast('❌ ' + (result.message || 'Error connecting card. Please try again.'));
                }
                
            } catch (error) {
                console.error('Error:', error);
                showToast('❌ Network error. Please check your connection and try again.');
            } finally {
                // Reset loading state
                submitBtn.disabled = false;
                submitText.classList.remove('hidden');
                submitLoading.classList.add('hidden');
            }
        });

        function closeSuccessModal() {
            document.getElementById('successModal').classList.add('hidden');
        }

        function showToast(message) {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            toastMessage.textContent = message;
            toast.classList.remove('hidden');
            setTimeout(() => {
                toast.classList.add('hidden');
            }, 3000);
        }

        // Close modal when clicking outside
        document.getElementById('successModal').addEventListener('click', (e) => {
            if (e.target.id === 'successModal') {
                closeSuccessModal();
            }
        });
        
        // Initial validation check
        updateSubmitButton();
    </script>
</body>
</html>
